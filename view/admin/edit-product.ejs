<%- include("../../view/partials/admin/header") %>
<head>
   <style>
       .thumbnails-container {
           display: flex;
           overflow-x: auto;
       }


       .thumbnail {
           margin-right: 10px;
       }
       .input-upload {
   position: relative;
}


.error-message {
           color: red;
           display: none;
       }


   </style>
       <link href="https://cdnjs.cloudflare.com/ajax/libs/croppie/2.6.5/croppie.min.css" rel="stylesheet">
       <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">


</head>
   <section class="content-main">
       <div class="row">
           <div class="col-9">
               <div class="content-header">
                   <h2 class="content-title">Edit Product</h2>


               </div>
           </div>
           <div class="col-lg-6">
               <div class="card mb-4">


                   <div class="card-body">
                       <form method="post" action="/admin/editProduct/<%=product.id%>" enctype="multipart/form-data"
                           onsubmit="return validateForm()">
                           <div class="mb-4">
                               <label for="product_name" class="form-label">Product Name</label>
                               <input type="text" name="productName" value="<%=product.productName%>"
                                   class="form-control border" id="product_name">
                                   <div id="productName-error" class="error-message"></div>
                           </div>
                           <div class="col-lg-4 mb-4">
                               <label class="form-label">Brand</label>
                               <select class="form-select border" name="brand">
                                  
                                       <option value="">
                                          
                                       </option>
                                      
                               </select>
                               <div id="brand-error" class="error-message"></div>


                           </div>
                           <div class="mb-4">
                               <label class="form-label">Full description</label>
                               <textarea name="description" class="form-control border" rows="4"><%= product.description %></textarea>
                                   <div id="description-error" class="error-message"></div>
                           </div>
                           <div class="row">
                               <div class="col-lg-4">
                                   <div class="mb-4">
                                       <label class="form-label">Regular price</label>
                                       <input placeholder="$" name="regularPrice" type="text"
                                           value="<%=product.regularPrice%>" class="form-control border">
                                           <div id="regularPrice-error" class="error-message"></div>
                                   </div>
                               </div>
                               <div class="col-lg-4">
                                   <div class="mb-4">
                                       <label class="form-label">Sale price</label>
                                       <input name="salePrice" type="text" value="<%=product.salePrice%>"
                                           class="form-control border">
                                   </div>
                                   <div id="salePrice-error" class="error-message"></div>
                               </div>
                               <div class="col-lg-4">
                                   <div class="mb-4">
                                       <label class="form-label">Quantity</label>
                                       <input name="quantity" type="text" value="<%=product.quantity%>"
                                           class="form-control border">
                                           <div id="quantity-error" class="error-message"></div>
                                   </div>
                               </div>
                           </div>
                           <div class="row">
                             
                               <div class="col-lg-4">
                                   <div class="mb-4">
                                       <label class="form-label">Color</label>
                                       <input name="color" type="text" value="<%=product.color%>"
                                           class="form-control border">
                                           <div id="color-error" class="error-message"></div>
                                   </div>
                               </div>
                              
                           </div>
                           <!-- <div class="card mb-4">


                               <div class="card-body">
                                   <div class="row gx-2">
                                       <div class="col-sm-6 mb-3">
                                           <label class="form-label">Category</label>
                                           <select class="form-select border" style="width: 150px;" name="category">
                                              <%for(let i =0;i<cat.length;i++){%>

                                                <option value="<%= cat[i].name %>" <%= product.category === cat[i]._id ? 'selected' : '' %>>
                                                    <%= cat[i].name %>
                                                </option>
                                                  <%}%>
                                           </select>
                                           <div id="category-error" class="error-message"></div>
                                       </div>
                                   </div>
                               </div>
                           </div> -->


<!-- 
                           <div class="mb-4">
                            <label for="category" class="form-label">Category</label>
                            <select id="category" name="category" class="form-select" required>
                                <% cat.forEach(category => { %>
                                    <option value="<%= category.name %>" 
                                        <%= product.category.name === category.name ? 'selected' : '' %>>
                                        <%= category.name %>
                                    </option>
                                <% }); %>
                            </select>
                        </div>
                        
                           <div class="mb-4">
                            <label class="form-label">Sizes and Quantities</label>
                            <div id="sizesContainer">
                                <% if (product.sizes && product.sizes.length > 0) { %>
                                    <% product.sizes.forEach((sizeObj, index) => { %>
                                        <div class="size-row d-flex gap-2 align-items-center mb-2">
                                            <select
                                                class="form-select"
                                                name="sizes[<%= index %>][size]"
                                                required
                                                style="width: 120px;"
                                            >
                                                <% const sizes =
                                                    product.category.type === "Clothing"
                                                        ? ["S", "M", "L", "XL", "XXL"]
                                                        : ["5", "6", "7", "8", "9", "10"]; %>
                                                <% sizes.forEach((size) => { %>
                                                    <option
                                                        value="<%= size %>"
                                                        <%= sizeObj.size === size ? "selected" : "" %>
                                                    >
                                                        <%= size %>
                                                    </option>
                                                <% }); %>
                                            </select>
                                            <input
                                                type="number"
                                                class="form-control"
                                                name="sizes[<%= index %>][quantity]"
                                                required
                                                min="1"
                                                placeholder="Quantity"
                                                value="<%= sizeObj.quantity %>"
                                                style="width: 120px;"
                                            />
                                            <button
                                                type="button"
                                                class="btn btn-danger btn-sm"
                                                onclick="removeSizeRow(this)"
                                            >
                                                Ã—
                                            </button>
                                        </div>
                                    <% }); %>
                                <% } else { %>
                                      Add a default size row if no sizes are present  
                                    <div class="size-row d-flex gap-2 align-items-center mb-2">
                                        <select
                                            class="form-select"
                                            name="sizes[0][size]"
                                            required
                                            style="width: 120px;"
                                        >
                                            <option value="">Select Size</option>
                                        </select>
                                        <input
                                            type="number"
                                            class="form-control"
                                            name="sizes[0][quantity]"
                                            required
                                            min="1"
                                            placeholder="Quantity"
                                            style="width: 120px;"
                                        />
                                        <button
                                            type="button"
                                            class="btn btn-danger btn-sm"
                                            onclick="removeSizeRow(this)"
                                        >
                                            Ã—
                                        </button>
                                    </div>
                                <% } %>
                            </div>
                            <button type="button" class="btn btn-primary mt-2" onclick="addSizeRow()">Add Size</button>
                        </div> -->

                        
                        <div class="mb-4">
                            <label for="category" class="form-label">Category</label>
                            <select id="category" name="category" class="form-select" required>
                                <% cat.forEach(category => { %>
                                    <option value="<%= category.name %>" 
                                        data-type="<%= category.type %>"
                                        <%= product.category.name === category.name ? 'selected' : '' %>>
                                        <%= category.name %>
                                    </option>
                                <% }); %>
                            </select>
                        </div>
                        
                        <div class="mb-4">
                            <label class="form-label">Sizes and Quantities</label>
                            <div id="sizesContainer">
                                <% product.sizes.forEach((size, index) => { %>
                                    <div class="size-row d-flex gap-2 align-items-center mb-2">
                                        <select class="form-select" name="sizes[<%= index %>][size]" required>
                                            <option value="">Select Size</option>
                                            <% const sizes = product.category.type === "Clothing" ? ["S", "M", "L", "XL", "XXL"] : ["5", "6", "7", "8", "9", "10"]; %>
                                            <% sizes.forEach(opt => { %>
                                                <option value="<%= opt %>" <%= size.size === opt ? "selected" : "" %>><%= opt %></option>
                                            <% }); %>
                                        </select>
                                        <input type="number" class="form-control" name="sizes[<%= index %>][quantity]" value="<%= size.quantity %>" required min="0" placeholder="Quantity">
                                        <button type="button" class="btn btn-danger btn-sm" onclick="this.closest('.size-row').remove()">Ã—</button>
                                    </div>
                                <% }); %>
                            </div>
                            <button type="button" class="btn btn-primary mt-2" onclick="addSizeRow()">Add Size</button>
                        </div>


                           <div class="card mb-2">
                            <div class="card-header">
                                <h4>Current Product Images</h4>
                            </div>
                            <div class="row">
                                <%for(let i=0;i<product.productImage.length;i++){%>
                                    <div class="col-md-12">
                                        <div class="mb-4">
                                            <div class="col-12">
                                                <td>
                                                    <input type="hidden"   
                                                        id="imageDatas" 
                                                        value="<%=product.productImage[i]%>"> <!-- Add the value field -->
                                                        <img class="rounded" style="width: 50px; height: 60px;"
                                                        src="/uploads/<%= product.productImage[i] %>" alt="Image">
                                                    <i onclick="deleteSingleImage('<%=product.productImage[i]%>','<%=product._id%>')"
                                                        style="position: absolute; margin-left: .5rem; cursor: pointer;"
                                                        class="fa-thin fa-x"></i>
                                                </td>
                                                
                                            </div>

                                        </div>
                                    </div>
                                    <%}%>
                            </div>
                        </div>

                              
                                  
                               
                        <div class="card mb-2">
                            <div class="card-header">
                                <h4>Choose Images</h4>
                            </div>
                            <div class="row">
                                <% for (let i = 1; i <= 4; i++) { %>
                                    <div class="card-body align-items-center mb-3">
                                        <label class="form-label">Image <%= i %></label>
                                        <input class="form-control" type="file" name="images" id="input<%= i %>" accept="image/*" onchange="viewImage(event, <%= i %>)">
                                        <div id="crop-container<%= i %>" class="crop-container" style="display: none;">
                                            <div id="croppie<%= i %>" class="croppie-wrapper"></div>
                                            <button type="button" class="btn btn-sm btn-primary mt-3" onclick="saveImage(<%= i %>)">Save</button>
                                        </div>
                                        <div id="image-preview-container">
                                            <div id="image-preview<%= i %>"></div>
                                        </div>
                                    </div>
                                <% } %>
                                
                                
                            </div>
                        </div>
                           <div>


                               <button class="btn btn-md rounded font-sm hover-up" id="updatebtn"
                                   type="button"  onclick="validateAndSubmit()">Update</button>
                           </div>
                       </form>
                   </div>
               </div>
           </div>
       </div>
       </div>
   </section>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/croppie/2.6.5/croppie.min.js"></script>
<%- include("../../view/partials/admin/footer") %>


<script>


function validateAndSubmit() {
if (validateForm()) {
   document.forms[0].submit();
}
}




function validateForm() {
   let imageDatas = false
           console.log("validate form");
           clearErrorMessages();
           const name = document.getElementsByName('productName')[0].value;
           const description = document.getElementsByName('description')[0].value;
           const brand = document.getElementsByName('brand')[0].value;
           const price = document.getElementsByName('regularPrice')[0].value;
           const saleprice = document.getElementsByName('salePrice')[0].value;
           const color = document.getElementsByName('color')[0].value;
           const category = document.getElementsByName('category')[0].value;
           const images = document.getElementById('input1')
           const quantity=document.getElementsByName('quantity')
imageDatas = document.getElementById("imageDatas")?.value;
           let isValid = true;    
           if (name.trim() === "") {
   displayErrorMessage('productName-error', 'Please enter a product name.');
   isValid = false;
}
          
console.log("description new", description)

           if (description=== '') {
               displayErrorMessage('description-error', 'Please enter a product description.');
               isValid = false;
           } 


           if ( parseInt(quantity) < 0) {
               displayErrorMessage('quantity-error', 'Please enter a valid non-negative quantity.');
               isValid = false;
           }




           if (!/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) < 0) {
               displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative price.');
               isValid = false;
           }
          if (!/^\d+(\.\d{1,2})?$/.test(saleprice) || parseFloat(saleprice) < 0) {
               displayErrorMessage('salePrice-error', 'Please enter a valid non-negative price.');
               isValid = false;
           }
          
           if (color.trim() === "") {
               displayErrorMessage('color-error', 'Please enter a color.');
               isValid = false;
           }
           if (!imageDatas && images.files.length === 0) {
               displayErrorMessage("images-error",'Please select an image.');
               isValid = false;
           }
           return isValid;
       }
      
       function displayErrorMessage(elementId, message) {
           var errorElement = document.getElementById(elementId);
           errorElement.innerText = message;
           errorElement.style.display = "block";
       }


       function clearErrorMessages() {
           const errorElements = document.getElementsByClassName('error-message');
           Array.from(errorElements).forEach(element => {
               element.innerText = '';
           });
           const errorMessage = document.getElementById('errorMessage');


       }




       const croppies = {};

function viewImage(event, index) {
    const input = event.target;
    const file = input.files[0];

    if (file) {
        const reader = new FileReader();
        reader.onload = function (e) {
            const cropContainer = document.getElementById(`crop-container${index}`);
            const croppieElement = document.getElementById(`croppie${index}`);

            // Destroy existing Croppie instance if it exists
            if (croppies[index]) {
                croppies[index].destroy();
            }

            cropContainer.style.display = 'block';

            croppies[index] = new Croppie(croppieElement, {
                viewport: { width: 150, height: 150, type: 'square' },
                boundary: { width: 250, height: 250 },
                showZoomer: true,
                enableOrientation: true,
            });

            // Load image into Croppie instance
            croppies[index].bind({
                url: e.target.result,
            });
        };
        reader.readAsDataURL(file);
    }
}

function saveImage(index) {
    if (croppies[index]) {
        croppies[index]
            .result({
                type: 'base64',
                format: 'png',
            })
            .then((base64) => {
                // Generate the renamed filename dynamically
                const timestamp = Date.now();
                const renamedFile = `cropped-img-${timestamp}-${index}.png`;

                // Create a hidden input to store the renamed file's base64 data
                const hiddenInputId = `croppedImage${index}`;
                let hiddenInput = document.getElementById(hiddenInputId);

                if (!hiddenInput) {
                    hiddenInput = document.createElement('input');
                    hiddenInput.type = 'hidden';
                    hiddenInput.name = 'croppedImages';
                    hiddenInput.id = hiddenInputId;
                    document.querySelector('form').appendChild(hiddenInput);
                }

                hiddenInput.value = base64;

                // Add the image preview with the renamed filename
                const previewContainer = document.getElementById(`image-preview${index}`);
                previewContainer.innerHTML = ''; // Clear previous previews if any
                const img = document.createElement('img');
                img.src = base64;
                img.alt = renamedFile;
                img.style.width = '100px'; // Adjust size as needed
                img.style.marginRight = '10px';

                const label = document.createElement('div');
                label.innerText = renamedFile; // Display the renamed filename
                label.style.fontSize = '12px';
                label.style.marginTop = '5px';

                previewContainer.appendChild(img);
                previewContainer.appendChild(label);

                alert(`Image ${index} cropped and saved as ${renamedFile}.`);

                // Hide the crop container and destroy the Croppie instance
                document.getElementById(`crop-container${index}`).style.display = 'none';
                croppies[index].destroy();
                croppies[index] = null;
            });
    }
}
   
       

 function deleteSingleImage(ImageId, productId) {
    console.log("ImageId:", ImageId, "ProductId:", productId);
$.ajax({
    url: "/admin/deleteImage",
    method: "post",
    data: { imageNameToServer: ImageId, productIdToServer: productId },
    success: ((response) => {
        if (response.status === true) {
            window.location.reload();
        }
    })
})
}




// / Function to update all size rows based on category
// // function updateAllSizeRows() {
//     const category = document.getElementById('category');
//     const selectedCategory = category.value.toLowerCase();
//     const sizesContainer = document.getElementById('sizesContainer');
//     const sizeRows = sizesContainer.getElementsByClassName('size-row');

//     // Get appropriate size options based on category
//     const sizeOptions = selectedCategory === "clothing" 
//         ? ["S", "M", "L", "XL", "XXL"]
//         : ["5", "6", "7", "8", "9", "10"];

//     // Update each existing size row
//     Array.from(sizeRows).forEach((row, index) => {
//         const sizeSelect = row.querySelector('select');
//         const currentValue = sizeSelect.value; // Store current selection
        
//         // Update options
//         sizeSelect.innerHTML = `
//             <option value="">Select Size</option>
//             ${sizeOptions.map(size => `
//                 <option value="${size}" ${size === currentValue ? 'selected' : ''}>
//                     ${size}
//                 </option>
//             `).join('')}
//         `;
//     });
// }

// // Function to add new size row
// function addSizeRow() {
//     const sizesContainer = document.getElementById('sizesContainer');
//     const rowIndex = sizesContainer.children.length;
//     const category = document.getElementById('category');
//     const selectedCategory = category.value.toLowerCase();

//     // Get appropriate size options based on category
//     const sizeOptions = selectedCategory === "clothing"
//         ? ["S", "M", "L", "XL", "XXL"]
//         : ["5", "6", "7", "8", "9", "10"];

//     const row = document.createElement('div');
//     row.className = 'size-row d-flex gap-2 align-items-center mb-2';

//     // Create size select
//     const sizeSelect = document.createElement('select');
//     sizeSelect.className = 'form-select';
//     sizeSelect.name = `sizes[${rowIndex}][size]`;
//     sizeSelect.required = true;
//     sizeSelect.style.width = '120px';

//     // Add size options
//     sizeSelect.innerHTML = `
//         <option value="">Select Size</option>
//         ${sizeOptions.map(size => `
//             <option value="${size}">${size}</option>
//         `).join('')}
//     `;

//     // Create quantity input
//     const quantityInput = document.createElement('input');
//     quantityInput.type = 'number';
//     quantityInput.className = 'form-control';
//     quantityInput.name = `sizes[${rowIndex}][quantity]`;
//     quantityInput.required = true;
//     quantityInput.min = '1';
//     quantityInput.placeholder = 'Quantity';
//     quantityInput.style.width = '120px';

//     // Create remove button
//     const removeBtn = document.createElement('button');
//     removeBtn.type = 'button';
//     removeBtn.className = 'btn btn-danger btn-sm';
//     removeBtn.innerHTML = 'Ã—';
//     removeBtn.onclick = function() {
//         row.remove();
//         updateSizeIndexes();
//     };

//     // Add elements to row
//     row.appendChild(sizeSelect);
//     row.appendChild(quantityInput);
//     row.appendChild(removeBtn);

//     // Add row to container
//     sizesContainer.appendChild(row);
// }

// // Function to remove size row
// function removeSizeRow(button) {
//     button.parentElement.remove();
//     updateSizeIndexes();
// }

// // Function to update indexes after removing rows
// function updateSizeIndexes() {
//     const sizesContainer = document.getElementById('sizesContainer');
//     const rows = sizesContainer.getElementsByClassName('size-row');
    
//     Array.from(rows).forEach((row, index) => {
//         const select = row.querySelector('select');
//         const input = row.querySelector('input');
        
//         select.name = `sizes[${index}][size]`;
//         input.name = `sizes[${index}][quantity]`;
//     });
// }

// // Function to prepare form data before submission
// function prepareFormData() {
//     const sizesContainer = document.getElementById('sizesContainer');
//     const sizeRows = sizesContainer.getElementsByClassName('size-row');
//     const sizesArray = [];

//     Array.from(sizeRows).forEach(row => {
//         const size = row.querySelector('select').value;
//         const quantity = parseInt(row.querySelector('input').value);
        
//         if (size && quantity > 0) {
//             sizesArray.push({ size, quantity });
//         }
//     });

//     // Add sizes array to a hidden input
//     let sizesInput = document.getElementById('sizesInput');
//     if (!sizesInput) {
//         sizesInput = document.createElement('input');
//         sizesInput.type = 'hidden';
//         sizesInput.id = 'sizesInput';
//         sizesInput.name = 'sizes';
//         document.querySelector('form').appendChild(sizesInput);
//     }
//     sizesInput.value = JSON.stringify(sizesArray);
// }

// // Initialize event listeners
// document.addEventListener('DOMContentLoaded', function() {
//     // Add category change listener
//     const categorySelect = document.getElementById('category');
//     categorySelect.addEventListener('change', updateAllSizeRows);

//     // Add form submit listener
//     const form = document.querySelector('form');
//     form.addEventListener('submit', function(e) {
//         e.preventDefault();
//         prepareFormData();
//         this.submit();
//     });

//     // Initial size update if category is pre-selected
//     if (categorySelect.value) {
//         updateAllSizeRows();
//     }
// });

document.addEventListener("DOMContentLoaded", function () {
    const sizesContainer = document.getElementById("sizesContainer");

    // Function to add a new size row
    window.addSizeRow = function () {
        const index = sizesContainer.children.length; // Count existing rows
        const row = document.createElement("div");
        row.className = "size-row d-flex gap-2 align-items-center mb-2";

        // Dropdown for selecting size
        const sizeSelect = document.createElement("select");
        sizeSelect.className = "form-select";
        sizeSelect.name = `sizes[${index}][size]`;
        sizeSelect.required = true;
        sizeSelect.innerHTML = `
            <option value="">Select Size</option>
            <option value="S">S</option>
            <option value="M">M</option>
            <option value="L">L</option>
            <option value="XL">XL</option>
            <option value="XXL">XXL</option>
        `;

        // Input field for quantity
        const quantityInput = document.createElement("input");
        quantityInput.type = "number";
        quantityInput.className = "form-control";
        quantityInput.name = `sizes[${index}][quantity]`;
        quantityInput.required = true;
        quantityInput.min = "0";
        quantityInput.placeholder = "Quantity";

        // Remove button
        const removeButton = document.createElement("button");
        removeButton.type = "button";
        removeButton.className = "btn btn-danger btn-sm";
        removeButton.textContent = "Ã—";
        removeButton.onclick = () => row.remove();

        // Append elements to the row
        row.append(sizeSelect, quantityInput, removeButton);
        sizesContainer.appendChild(row);
    };
});



// function addSizeRow() {
//     const sizesContainer = document.getElementById("sizesContainer");
//     const rowIndex = sizesContainer.children.length;

//     const row = document.createElement("div");
//     row.className = "size-row d-flex gap-2 align-items-center mb-2";

//     const sizeSelect = document.createElement("select");
//     sizeSelect.className = "form-select";
//     sizeSelect.name = `sizes[${rowIndex}][size]`;
//     sizeSelect.required = true;
//     sizeSelect.style.width = "120px";

//     sizeSelect.innerHTML = `
//         <option value="">Select Size</option>
//         ${["S", "M", "L", "XL", "XXL"].map(
//             (size) => `<option value="${size}">${size}</option>`
//         )}
//     `;

//     const quantityInput = document.createElement("input");
//     quantityInput.type = "number";
//     quantityInput.className = "form-control";
//     quantityInput.name = `sizes[${rowIndex}][quantity]`;
//     quantityInput.required = true;
//     quantityInput.min = "1";
//     quantityInput.placeholder = "Quantity";
//     quantityInput.style.width = "120px";

//     const removeBtn = document.createElement("button");
//     removeBtn.type = "button";
//     removeBtn.className = "btn btn-danger btn-sm";
//     removeBtn.innerHTML = "Ã—";
//     removeBtn.onclick = () => row.remove();

//     row.appendChild(sizeSelect);
//     row.appendChild(quantityInput);
//     row.appendChild(removeBtn);

//     sizesContainer.appendChild(row);
// }

// function removeSizeRow(button) {
//     button.parentElement.remove();
// }


// function deleteSingleImage(ImageId, productId) {
//     if (confirm('Are you sure you want to delete this image?')) {
//         $.ajax({
//             url: "/admin/deleteImage",
//             method: "post",
//             data: { 
//                 imageNameToServer: ImageId, 
//                 productIdToServer: productId 
//             },
//             success: (response) => {
//                 if (response.status === true) {
//                     // Show success message before reload
//                     alert('Image deleted successfully!');
//                     window.location.reload();
//                 }
//             },
//             error: (error) => {
//                 console.error('Error deleting image:', error);
//                 alert('Failed to delete image. Please try again.');
//             }
//         });
//     }
// }

// // Add this function to validate total number of images
// function validateTotalImages() {
//     const existingImages = document.querySelectorAll('#imageDatas').length;
//     const newImages = document.querySelectorAll('input[type="file"]').length;
    
//     if (existingImages + newImages > 4) {
//         alert('Maximum 4 images allowed per product');
//         return false;
//     }
//     return true;
// }

// // Update your form validation to include image count check
// function validateForm() {
//     // ... your existing validation code ...
    
//     if (!validateTotalImages()) {
//         return false;
//     }
    
//     return isValid;
// }
   </script>

