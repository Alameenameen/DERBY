<%- include("../../view/partials/admin/header") %>
<head>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/croppie/2.6.5/croppie.min.css" rel="stylesheet">
</head>
<style>
   .error-message {
       color: red;
   }

   .thumbnails-container {
       display: flex;
       overflow-x: auto;
   }

   .thumbnail {
       margin-right: 10px;
   }
</style>

<section class="content-main">
    <div class="row">
        <div class="col-9">
            <div class="content-header">
                <h2 class="content-title">Add New Product</h2>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="card mb-4">
                <div class="card-body">
                    <form method="post" action="/admin/addProducts" enctype="multipart/form-data" onsubmit="return validateForm()">
                        <div class="mb-4">
                            <label for="product_name" class="form-label">Product Name</label>
                            <input type="text" placeholder="Type here" name="productName" class="form-control border" id="product_name" required>
                            <div id="productName-error" class="error-message"></div>
                        </div>

                       

                        <div class="mb-4">
                            <label class="form-label">Full Description</label>
                            <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control border" rows="4" required></textarea>
                            <div id="description-error" class="error-message"></div>
                        </div>
                        <!-- //brand -->
                         
                        <div class="mb-4">
                            <label class="form-label">Brand</label>
                            <select class="form-select border" name="brand" required>
                                <option value="">Select Brand</option>
                                <% brands.forEach(brand => { %>
                                    <% if (!brand.isBlocked) { %>  <!-- Only show active brands -->
                                        <option value="<%= brand._id %>"><%= brand.brandName %></option>
                                    <% } %>
                                <% }); %>
                            </select>
                            <div id="brand-error" class="error-message"></div>
                        </div>

                        <div class="row">
                            <div class="col-lg-4 mb-4">
                                <label class="form-label">Regular Price</label>
                                <input placeholder="₹" name="regularPrice" type="number" class="form-control border" required>
                                <div id="regularPrice-error" class="error-message"></div>
                            </div>
                            <div class="col-lg-4 mb-4">
                                <label class="form-label">Sale Price</label>
                                <input placeholder="₹" name="salePrice" type="number" class="form-control border">
                                <div id="salePrice-error" class="error-message"></div>
                            </div>
                            <div class="col-lg-4 mb-4">
                                <label class="form-label">Quantity</label>
                                <input name="quantity" type="number" class="form-control border" required>
                                <div id="quantity-error" class="error-message"></div>
                            </div>
                        </div>

                        
                        <div class="col-lg-4 mb-4">
                            <label class="form-label">color</label>
                            <input name="color" type="text" class="form-control border">
                            <div id="color-error" class="error-message"></div>
                        </div>
                    </div>

                    <div class="mb-4">
                        <label class="form-label">Category</label>
                        <select class="form-select border" name="category" id="categorySelect" required onchange="updateSizes()">
                            <% cat.forEach(c => { %>
                                <option value="<%= c.name %>" data-type="<%= c.type %>"><%= c.name %></option>
                            <% }); %>
                        </select>
                        <div id="category-error" class="error-message"></div>
                    </div>
                    
                    <div class="mb-4">
                        <label class="form-label">Sizes and Quantities</label>
                        <div id="sizesContainer">
                            <!-- Size inputs will be dynamically added here -->
                        </div>
                        <div id="size-error" class="error-message"></div>
                    </div>

                        <div class="card mb-2">
                            <div class="card-header">
                                <h4>Choose Images</h4>
                            </div>
                            <div class="row">
                                <% for (let i = 1; i <= 4; i++) { %>
                                    <div class="card-body align-items-center mb-3">
                                        <label class="form-label">Image <%= i %></label>
                                        <input class="form-control" type="file" name="images" id="input<%= i %>" accept="image/*" onchange="viewImage(event,<%= i %>)">
                                        <div id="crop-container<%= i %>" class="crop-container" style="display: none;">
                                            <div id="croppie<%= i %>" class="croppie-wrapper"></div>
                                            <button type="button" class="btn btn-sm btn-primary mt-3" onclick="saveImage('<%= i %>')">Save</button>
                                        </div>
                                        <div id="image-preview-container">
                                            <div id="image-preview<%= i %>"></div>
                                        </div>
                                    </div>
                                <% } %>
                                
                                
                            </div>
                        </div>
                        

                        <div>
                            <button class="btn btn-md rounded font-sm hover-up" type="submit">Publish</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</section>


<script src="https://cdnjs.cloudflare.com/ajax/libs/croppie/2.6.5/croppie.min.js"></script>


<script>
   

    const croppies = {};

function viewImage(event, index) {
    const input = event.target;
    const file = input.files[0];

    if (file) {
        const reader = new FileReader();
        reader.onload = function (e) {
            const cropContainer = document.getElementById(`crop-container${index}`);
            const croppieElement = document.getElementById(`croppie${index}`);

            // Destroy existing Croppie instance if it exists
            if (croppies[index]) {
                croppies[index].destroy();
            }

            cropContainer.style.display = 'block';

            croppies[index] = new Croppie(croppieElement, {
                viewport: { width: 150, height: 150, type: 'square' },
                boundary: { width: 250, height: 250 },
                showZoomer: true,
                enableOrientation: true,
            });

            // Load image into Croppie instance
            croppies[index].bind({
                url: e.target.result,
            });
        };
        reader.readAsDataURL(file);
    }
}

function saveImage(index) {
    if (croppies[index]) {
        croppies[index]
            .result({
                type: 'base64',
                format: 'png',
            })
            .then((base64) => {
                // Generate the renamed filename dynamically
                const timestamp = Date.now();
                const renamedFile = `cropped-img-${timestamp}-${index}.png`;

                // Create a hidden input to store the renamed file's base64 data
                const hiddenInputId = `croppedImage${index}`;
                let hiddenInput = document.getElementById(hiddenInputId);

                if (!hiddenInput) {
                    hiddenInput = document.createElement('input');
                    hiddenInput.type = 'hidden';
                    hiddenInput.name = 'croppedImages';
                    hiddenInput.id = hiddenInputId;
                    document.querySelector('form').appendChild(hiddenInput);
                }

                hiddenInput.value = base64;

                // Add the image preview with the renamed filename
                const previewContainer = document.getElementById(`image-preview${index}`);
                previewContainer.innerHTML = ''; // Clear previous previews if any
                const img = document.createElement('img');
                img.src = base64;
                img.alt = renamedFile;
                img.style.width = '100px'; // Adjust size as needed
                img.style.marginRight = '10px';

                const label = document.createElement('div');
                label.innerText = renamedFile; // Display the renamed filename
                label.style.fontSize = '12px';
                label.style.marginTop = '5px';

                previewContainer.appendChild(img);
                previewContainer.appendChild(label);

                alert(`Image ${index} cropped and saved as ${renamedFile}.`);

                // Hide the crop container and destroy the Croppie instance
                document.getElementById(`crop-container${index}`).style.display = 'none';
                croppies[index].destroy();
                croppies[index] = null;
            });
    }
}


    // function validateForm() {
    //     clearErrorMessages();

    //     const name = document.getElementsByName('productName')[0].value;
    //     const description = document.getElementById('descriptionid').value;
    //     const price = document.getElementsByName('regularPrice')[0].value;
    //     const salePrice = document.getElementsByName('salePrice')[0].value;
    //     const quantity = document.getElementsByName('quantity')[0].value;

    //     let isValid = true;

    //     if (!name.trim() || !/^[a-zA-Z\s]+$/.test(name.trim())) {
    //         displayErrorMessage('productName-error', 'Please enter a valid product name.');
    //         isValid = false;
    //     }

    //     if (!description.trim()) {
    //         displayErrorMessage('description-error', 'Please enter a product description.');
    //         isValid = false;
    //     }

    //     if (!price || parseFloat(price) <= 0 || !/^\d+(\.\d{1,2})?$/.test(price)) {
    //         displayErrorMessage('regularPrice-error', 'Please enter a valid regular price.');
    //         isValid = false;
    //     }

    //     if (salePrice && (parseFloat(salePrice) < 0 || !/^\d+(\.\d{1,2})?$/.test(salePrice) || parseFloat(price) <= parseFloat(salePrice))) {
    //         displayErrorMessage('salePrice-error', 'Sale price must be less than regular price.');
    //         isValid = false;
    //     }

    //     if (!quantity || parseInt(quantity) <= 0) {
    //         displayErrorMessage('quantity-error', 'Please enter a valid quantity.');
    //         isValid = false;
    //     }

    //     return isValid;
    // }

    // function displayErrorMessage(elementId, message) {
    //     document.getElementById(elementId).innerText = message;
    // }

    // function clearErrorMessages() {
    //     Array.from(document.getElementsByClassName('error-message')).forEach(el => el.innerText = '');
    // }

    function updateSizes() {
    const categorySelect = document.getElementById('categorySelect');
    const selectedOption = categorySelect.options[categorySelect.selectedIndex];
    const categoryType = selectedOption.getAttribute('data-type');
    const sizesContainer = document.getElementById('sizesContainer');
    sizesContainer.innerHTML = '';

    let sizes = [];
    if (categoryType === 'Clothing') {
        sizes = ['S', 'M', 'L', 'XL', 'XXL'];
    } else if (categoryType === 'Footwear') {
        sizes = ['5', '6', '7', '8', '9', '10'];
    }

    // Create a hidden input for sizes array if it doesn't exist
    let sizesArrayInput = document.getElementById('sizesArrayInput');
    if (!sizesArrayInput) {
        sizesArrayInput = document.createElement('input');
        sizesArrayInput.type = 'hidden';
        sizesArrayInput.id = 'sizesArrayInput';
        sizesArrayInput.name = 'sizes';
        document.querySelector('form').appendChild(sizesArrayInput);
    }

    sizes.forEach(size => {
        const sizeDiv = document.createElement('div');
        sizeDiv.className = 'row mb-2';
        sizeDiv.innerHTML = `
            <div class="col-md-2">
                <label class="form-label">Size ${size}</label>
            </div>
            <div class="col-md-4">
                <input type="number" 
                       class="form-control border size-quantity" 
                       data-size="${size}"
                       placeholder="Quantity for size ${size}" 
                       min="0" 
                       value="0"
                       onchange="updateSizesArray()">
            </div>
        `;
        sizesContainer.appendChild(sizeDiv);
    });

    // Initialize sizes array
    updateSizesArray();
}

function updateSizesArray() {
    const sizeInputs = document.querySelectorAll('.size-quantity');
    const sizesArray = [];

    sizeInputs.forEach(input => {
        const quantity = parseInt(input.value) || 0;
        const size = input.getAttribute('data-size');
        
        if (quantity > 0) {
            sizesArray.push({
                size: size,
                quantity: quantity
            });
        }
    });

    // Update hidden input value
    const sizesArrayInput = document.getElementById('sizesArrayInput');
    sizesArrayInput.value = JSON.stringify(sizesArray);
}

function validateForm() {
    clearErrorMessages();
    let isValid = true;

    // Get form elements
    const name = document.getElementsByName('productName')[0].value;
    const description = document.getElementById('descriptionid').value;
    const brand = document.getElementsByName('brand')[0].value;
    const price = document.getElementsByName('regularPrice')[0].value;
    const saleprice = document.getElementsByName('salePrice')[0].value;
    const color = document.getElementsByName('color')[0].value;
    const category = document.getElementsByName('category')[0].value;
    const images = document.getElementById('input1');
    const status = document.getElementsByName('status')[0]?.value;

    // Validate product name
    if (name.trim() === "") {
        displayErrorMessage('productName-error', 'Please enter a product name.');
        isValid = false;
    } else if (!/^[a-zA-Z\s]+$/.test(name.trim())) {
        displayErrorMessage('productName-error', 'Product name should contain only alphabetic characters.');
        isValid = false;
    }

    // Validate description
    if (description.trim() === "") {
        displayErrorMessage('description-error', 'Please enter a product description.');
        isValid = false;
    } else if (!/^[a-zA-Z\s]+$/.test(description.trim())) {
        displayErrorMessage('description-error', 'Product description should contain only alphabetic characters.');
        isValid = false;
    }



    // Validate regular price
    if (!/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) < 0) {
        displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative price.');
        isValid = false;
    }

    // Validate sale price
    if (!/^\d+(\.\d{1,2})?$/.test(saleprice) || parseFloat(saleprice) < 0) {
        displayErrorMessage('salePrice-error', 'Please enter a valid non-negative price.');
        isValid = false;
    }
    if (parseFloat(price) <= parseFloat(saleprice)) {
        displayErrorMessage('regularPrice-error', 'Regular price must be greater than sale price.');
        isValid = false;
    }

    // Validate color
    if (color.trim() === "") {
        displayErrorMessage('color-error', 'Please enter a color.');
        isValid = false;
    } else if (!/^[a-zA-Z\s]+$/.test(color.trim())) {
        displayErrorMessage('color-error', 'Color should contain only alphabetic characters.');
        isValid = false;
    }

    // Validate status if it exists
    if (status) {
        const validStatuses = ['inStock', 'out Of Stock', 'Discontinued', 'Available'];
        if (status.trim() === "") {
            displayErrorMessage('status-error', 'Please select a status.');
            isValid = false;
        } else if (!validStatuses.includes(status)) {
            displayErrorMessage('status-error', 'Invalid status value selected.');
            isValid = false;
        }
    }

    // Validate images
    if (images.files.length === 0) {
        displayErrorMessage("images-error", 'Please select an image.');
        isValid = false;
    }

    // If form is valid, add the sizes data
    // if (isValid) {
    //     const sizesInput = document.createElement('input');
    //     sizesInput.type = 'hidden';
    //     sizesInput.name = 'sizes';
    //     sizesInput.value = JSON.stringify(sizesArray);
    //     document.querySelector('form').appendChild(sizesInput);
    // }

    // return isValid;
    const sizeInputs = document.querySelectorAll('.size-quantity');
    let totalQuantity = 0;

    sizeInputs.forEach(input => {
        const quantity = parseInt(input.value) || 0;
        if (quantity < 0) {
            displayErrorMessage('size-error', 'Quantities cannot be negative.');
            isValid = false;
        }
        totalQuantity += quantity;
    });

    if (totalQuantity === 0) {
        displayErrorMessage('size-error', 'At least one size must have a quantity greater than 0.');
        isValid = false;
    }

    // Make sure sizes array is updated before submission
    if (isValid) {
        updateSizesArray();
    }

    return isValid;

}

function displayErrorMessage(elementId, message) {
    const errorElement = document.getElementById(elementId);
    if (errorElement) {
        errorElement.innerText = message;
        errorElement.style.display = "block";
    }
}

function clearErrorMessages() {
    const errorElements = document.getElementsByClassName('error-message');
    Array.from(errorElements).forEach(element => {
        element.innerText = '';
        element.style.display = 'none';
    });
}


//     function validateForm() {
//     clearErrorMessages();

//     const name = document.getElementsByName('productName')[0].value;
//     const description = document.getElementById('descriptionid').value;
//     const brand = document.getElementsByName('brand')[0].value;
//     const price = document.getElementsByName('regularPrice')[0].value;
//     const saleprice = document.getElementsByName('salePrice')[0].value;
//     const color = document.getElementsByName('color')[0].value;
//     const category = document.getElementsByName('category')[0].value;
//     const images = document.getElementById('input1');
//     const quantity = document.getElementsByName('quantity')[0].value; // Add [0] to access the element
//     const status = document.getElementsByName('status')[0].value; // Add status field

//     let isValid = true;

//     // Validate product name
//     if (name.trim() === "") {
//         displayErrorMessage('productName-error', 'Please enter a product name.');
//         isValid = false;
//     } else if (!/^[a-zA-Z\s]+$/.test(name.trim())) {
//         displayErrorMessage('productName-error', 'Product name should contain only alphabetic characters.');
//         isValid = false;
//     }

//     // Validate description
//     if (description.trim() === "") {
//         displayErrorMessage('description-error', 'Please enter a product description.');
//         isValid = false;
//     } else if (!/^[a-zA-Z\s]+$/.test(description.trim())) {
//         displayErrorMessage('description-error', 'Product description should contain only alphabetic characters.');
//         isValid = false;
//     }

//     // Validate quantity
//     if (quantity.trim() === "" || parseInt(quantity) < 0) {
//         displayErrorMessage('quantity-error', 'Please enter a valid non-negative quantity.');
//         isValid = false;
//     }

//     // Validate regular price
//     if (!/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) < 0) {
//         displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative price.');
//         isValid = false;
//     }

//     // Validate sale price
//     if (!/^\d+(\.\d{1,2})?$/.test(saleprice) || parseFloat(saleprice) < 0) {
//         displayErrorMessage('salePrice-error', 'Please enter a valid non-negative price.');
//         isValid = false;
//     }
//     if (parseFloat(price) <= parseFloat(saleprice)) {
//         displayErrorMessage('regularPrice-error', 'Regular price must be greater than sale price.');
//         isValid = false;
//     }

//     // Validate color
//     if (color.trim() === "") {
//         displayErrorMessage('color-error', 'Please enter a color.');
//         isValid = false;
//     } else if (!/^[a-zA-Z\s]+$/.test(color.trim())) {
//         displayErrorMessage('color-error', 'Color should contain only alphabetic characters.');
//         isValid = false;
//     }

//     // Validate status
//     const validStatuses = ['inStock', 'out Of Stock', 'Discontinued','Available']; // Adjust these values as per your schema
//     if (status.trim() === "") {
//         displayErrorMessage('status-error', 'Please select a status.');
//         isValid = false;
//     } else if (!validStatuses.includes(status)) {
//         displayErrorMessage('status-error', 'Invalid status value selected.');
//         isValid = false;
//     }

//     // Validate images
//     if (images.files.length === 0) {
//         displayErrorMessage("images-error", 'Please select an image.');
//         isValid = false;
//     }

//     return isValid;
// }

// function displayErrorMessage(elementId, message) {
//     const errorElement = document.getElementById(elementId);
//     errorElement.innerText = message;
//     errorElement.style.display = "block";
// }

// function clearErrorMessages() {
//     const errorElements = document.getElementsByClassName('error-message');
//     Array.from(errorElements).forEach(element => {
//         element.innerText = '';
//         element.style.display = 'none'; // Ensure errors are hidden
//     });
// }



</script>

<%- include("../../view/partials/admin/footer") %>